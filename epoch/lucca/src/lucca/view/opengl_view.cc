#include <GL/glew.h>

#include "lucca/view/opengl_view.hpp"

#include "lucca/painter/painter.hpp"
#include "lucca/camera.hpp"

#include <ayla_gl/print_opengl_error.hpp>

namespace lucca {

OpenGLView::OpenGLView() = default;

OpenGLView::~OpenGLView() = default;

void OpenGLView::setPainter(std::unique_ptr<Painter> painter) {
	_setPainter(std::move(painter));
}

void OpenGLView::_setPainter(std::unique_ptr<Painter> painter) {
	if (_painter) {
		_painter->dispose();
	}

	_painter = std::move(painter);
}

Painter* OpenGLView::getPainter() const {
	return _painter.get();
}

Camera* OpenGLView::getDefaultCamera() const {
	return _cameras.empty() ? nullptr : _cameras.front().get();
}

void OpenGLView::addCamera(std::unique_ptr<Camera> camera) {
	_addCamera(std::move(camera));
}

void OpenGLView::_addCamera(std::unique_ptr<Camera> camera) {
	camera->setRenderTarget(this);
	_cameras.push_back(std::move(camera));
}

void OpenGLView::_copyFrom(const OpenGLView& other) {
	_painter = other._painter ? other._painter->clone() : nullptr;

	for (auto& camera : other._cameras) {
		_addCamera(std::make_unique<Camera>(*camera));
	}
}

void OpenGLView::_initialize() {
	glewExperimental = true; // http://glew.sourceforge.net/basic.html

	if (glewInit() != GLEW_OK) {
		AYLA_DEBUG_MESSAGE("Failed to initialize GLEW.");
		exit(1);
	}

	ayla_gl::checkOpenGLError(); // discard errors that may be generated by glewInit()

	if (_painter) {
		_painter->initialize(this);
	}
}

void OpenGLView::_dispose() {
	if (_painter) {
		_painter->dispose();
	}
}

void OpenGLView::_resize(SizeType width, SizeType height) {
	if (_painter) {
		_painter->resize(width, height);
	}
}

void OpenGLView::_paint() {
	if (!_painter) {
		return;
	}

	auto paintingOk = false;
	const auto maxPaintingAttempts = SizeType(3);

	for (auto i = SizeType(0); (i < maxPaintingAttempts) && !paintingOk; ++i) {
		if (!_painter->compareRenderTarget(this)) {
			_painter->initialize(this); // painter must be initialized with this render target
		}

		glClear(
			GL_COLOR_BUFFER_BIT
			| GL_DEPTH_BUFFER_BIT
			| GL_ACCUM_BUFFER_BIT
			| GL_STENCIL_BUFFER_BIT
		);

		paintingOk = true;

		for (auto& camera : _cameras) {
			glViewport(
				camera->getViewportAbsoluteX(),
				camera->getViewportAbsoluteY(),
				camera->getViewportAbsoluteWidth(),
				camera->getViewportAbsoluteHeight()
			);

			paintingOk &= _painter->paint(*camera);
		}
	}

	assert(paintingOk);
}

}