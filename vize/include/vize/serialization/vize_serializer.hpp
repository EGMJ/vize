#ifndef VIZE_SERIALIZER_HPP
#define VIZE_SERIALIZER_HPP

#include "vize/config.hpp"

#include <ayla/serialization/serializer.hpp>
#include <string>

namespace vize {
	class VolumeDocument;
}

/**
 * Knows how to save and load VIZE stuff.
 *
 * @warning Files generated by this abstraction are not portable between 32 and 64 architectures.
 *
 * @author O Programador
 */
class VizeSerializer final {
public:
	using InternalSerializer = ayla::Serializer<vize::VolumeDocument>;
	using Status = InternalSerializer::Status;

public:
	VizeSerializer();
	~VizeSerializer();

	/**
	 * Save @param document into the file specified by @param outputFileName.
	 */
	bool save(const vize::VolumeDocument& document, const std::string& outputFileName);

	/**
	 * Load the document saved in file specified by @param inputFileName into @param document.
	 */
	bool load(vize::VolumeDocument& document, const std::string& inputFileName);

	/**
	 * @return The status of the last operation performed by the serializer.
	 */
	Status getStatus() const;

private:
	InternalSerializer _serializer;
};

#endif // VIZE_SERIALIZER_HPP